import random
import asyncio
from aiogram import Router, types, F
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import Message
from aiogram.filters import Command
from bot.sharedState import user_flashcards

from bot.database.db_helpers import (
    get_all_modules, get_connection, get_or_create_session, add_word,
    get_words, add_library_word, can_user_edit_word, update_progress, get_achievements_for_student
)
from bot.handlers.teacher import delete_message_later
from bot.menus import personal_dict_menu, student_main_menu, student_word_view_menu
from bot.services.card_generator import generate_flashcard_image


router = Router()

# ---------- FSM States ----------
class StudentEditWord(StatesGroup):
    waiting_for_word_id = State()
    waiting_for_new_text = State()
    waiting_for_new_translation = State()

class FlashcardState(StatesGroup):
    selecting_module = State()
    awaiting_input = State()

class PersonalDictFSM(StatesGroup):
    adding_word = State()
    adding_translation = State()
    adding_synonyms = State()
    deleting_word_id = State()


# ---------- Utility ----------
def pick_weighted_word(words):
    total = sum(word["weight"] for word in words)
    r = random.uniform(0, total)
    upto = 0
    for word in words:
        if upto + word["weight"] >= r:
            return word
        upto += word["weight"]
    return words[-1]  # fallback




# ---------- Command Handlers ----------
@router.message(Command("menu_student"))
async def show_student_menu(message: types.Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=student_main_menu())


@router.message(Command("help"))
async def student_help(message: types.Message):
    help_text = (
        "üéì <b>–°–ø—Ä–∞–≤–∫–∞ –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–∞:</b>\n\n"
        "<b>–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n"
        "/menu_student - –ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é —Å—Ç—É–¥–µ–Ω—Ç–∞\n"
        "/levelSwitch - –ò–∑–º–µ–Ω–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ (A1/A2/B1)\n"
        "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n"
        "/stopcard - –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–µ–∂–∏–º —Ñ–ª–µ—à-–∫–∞—Ä—Ç\n\n"
        "<b>–§—É–Ω–∫—Ü–∏–∏ –º–µ–Ω—é:</b>\n"
        "‚Ä¢ <b>–§–ª–µ—à-–∫–∞—Ä—Ç—ã</b> - –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞ —Å–ª–æ–≤\n"
        "‚Ä¢ <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–ª–æ–≤–æ</b> - –ò–∑–º–µ–Ω–∏—Ç—å —Å–ª–æ–≤–∞ –∏–∑ –≤–∞—à–µ–π –±–∏–±–ª–∏–æ—Ç–µ–∫–∏\n"
        "‚Ä¢ <b>–ú–æ–∏ –º–æ–¥—É–ª–∏</b> - –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ —É—á–µ–±–Ω—ã–µ –º–æ–¥—É–ª–∏"
    )
    await message.answer(help_text, parse_mode="HTML")

# ---------- Flashcard Flow ----------
@router.callback_query(F.data == "flashcards_start")
async def start_flashcard_practice(callback: types.CallbackQuery, state: FSMContext):
    await state.set_state(FlashcardState.selecting_module)
    await callback.message.answer(
        "–†–µ–∂–∏–º —Ñ–ª–µ—à-–∫–∞—Ä—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω.\n\n–í–∞–º –±—É–¥–µ—Ç –ø–æ–∫–∞–∑–∞–Ω–æ —Å–ª–æ–≤–æ –Ω–∞ —Ä—É—Å—Å–∫–æ–º. –ù–∞–ø–∏—à–∏—Ç–µ –µ–≥–æ –ø–µ—Ä–µ–≤–æ–¥ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π."
    )
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –º–æ–¥—É–ª—å (–Ω–∞–ø—Ä–∏–º–µ—Ä: module 4) –∏–ª–∏ '–≤—Å–µ' –¥–ª—è –≤—Å–µ—Ö —Å–ª–æ–≤:")

@router.message(FlashcardState.selecting_module)
async def handle_module_selection(message: types.Message, state: FSMContext):
    module = message.text.strip().lower()
    conn = get_connection()
    cur = conn.cursor()

    query = "SELECT Word_ID, Text, translation, synonyms FROM Word WHERE added_by = 'teacher'"
    params = []
    if module != "–≤—Å–µ":
        query += " AND LOWER(module) = LOWER(?)"
        params.append(module)

    cur.execute(query, params)
    rows = cur.fetchall()
    conn.close()

    if not rows:
        await message.answer("–°–ª–æ–≤ –∏–∑ —ç—Ç–æ–≥–æ –º–æ–¥—É–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        return

    words = [{"Word_ID": r[0], "Text": r[1], "translation": r[2], "synonyms": r[3] or "–Ω–µ —É–∫–∞–∑–∞–Ω—ã"} for r in rows]
    random.shuffle(words)
    user_flashcards[message.from_user.id] = words[1:]
    word = words[0]

    await state.set_state(FlashcardState.awaiting_input)
    await state.update_data(current_word=word)

    image = await generate_flashcard_image(..., is_question=True)
    sent = await message.answer_photo(photo=image)

    await message.answer(f"–°–ª–æ–≤–æ: {word['translation']}")
    asyncio.create_task(delete_message_later(message.bot, message.chat.id, sent.message_id))

@router.message(FlashcardState.awaiting_input)
async def check_flashcard_answer(message: types.Message, state: FSMContext):
    data = await state.get_data()

    if message.text.strip().lower() == "/stopcard":
        print("[DEBUG] intercepted /stopcard inside awaiting_input")
        await state.clear()
        await message.answer("‚õîÔ∏è –†–µ–∂–∏–º —Ñ–ª–µ—à-–∫–∞—Ä—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
        return

    session_id = get_or_create_session(message.from_user.id)
    data = await state.get_data()

    # ‚õîÔ∏è –ï—Å–ª–∏ /stopcard —É–∂–µ –±—ã–ª –≤—ã–∑–≤–∞–Ω
    if data.get("stopcard"):
        await state.clear()
        return

    # –ó–∞—â–∏—Ç–∞ –æ—Ç –ø–æ—Ç–µ—Ä–∏ current_word
    if "current_word" not in data:
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞: –Ω–µ—Ç —Ç–µ–∫—É—â–µ–≥–æ —Å–ª–æ–≤–∞.")
        await state.update_data(stopcard=True)
        await state.set_state(None)

        return

    word = data["current_word"]
    user_input = message.text.strip().lower()
    correct = word["Text"].strip().lower()
    synonyms = [s.strip().lower() for s in (word.get("synonyms") or "").split(",")]
    is_correct = user_input == correct or user_input in synonyms

    update_progress(session_id, word["Word_ID"], is_correct)

    feedback = (
        "‚úÖ –í–µ—Ä–Ω–æ!" if user_input == correct else
        "‚úÖ –í–µ—Ä–Ω–æ (—Å–∏–Ω–æ–Ω–∏–º)!" if user_input in synonyms else
        f"‚ùå –ù–µ–≤–µ—Ä–Ω–æ.\n–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: <b>{word['Text']}</b>"
    )
    await message.answer(
        f"{feedback}\n–°–∏–Ω–æ–Ω–∏–º—ã: {word.get('synonyms', '–Ω–µ —É–∫–∞–∑–∞–Ω—ã')}",
        parse_mode="HTML"
    )

    flashcards = data.get("flashcards", [])

    if not flashcards:
        await message.answer("üéâ –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
        await state.clear()
        return

    if not is_correct:
        flashcards.append(word)

    next_word = flashcards.pop(0)

    # –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–æ, —á—Ç–æ –Ω—É–∂–Ω–æ
    await state.update_data(current_word=next_word, flashcards=flashcards)

    # –µ—â—ë —Ä–∞–∑ –ø—Ä–æ–≤–µ—Ä–∏–º —Ñ–ª–∞–≥ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
    data = await state.get_data()
    if data.get("stopcard"):
        await state.clear()
        return

    image = await generate_flashcard_image(next_word["translation"], is_question=True)
    sent = await message.answer_photo(photo=image)
    await message.answer(f"–°–ª–æ–≤–æ: {next_word['translation']}")
    asyncio.create_task(delete_message_later(message.bot, message.chat.id, sent.message_id))


# ---------- Word Editing ----------
@router.callback_query(F.data == "student_start_edit")
async def student_prompt_edit(callback: types.CallbackQuery, state: FSMContext):
    await state.set_state(StudentEditWord.waiting_for_word_id)
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ ID —Å–ª–æ–≤–∞ –∏–∑ –≤–∞—à–µ–π –±–∏–±–ª–∏–æ—Ç–µ–∫–∏:")

@router.message(StudentEditWord.waiting_for_word_id)
async def student_check_edit_permission(message: types.Message, state: FSMContext):
    session_id = get_or_create_session(message.from_user.id)
    try:
        word_id = int(message.text.strip())
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID.")
        return

    if not can_user_edit_word(session_id, word_id):
        await message.answer("–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —ç—Ç–æ —Å–ª–æ–≤–æ.")
        await state.clear()
        return

    await state.update_data(word_id=word_id)
    await state.set_state(StudentEditWord.waiting_for_new_text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Å–ª–æ–≤–∞:")

@router.message(StudentEditWord.waiting_for_new_text)
async def student_edit_text(message: types.Message, state: FSMContext):
    await state.update_data(new_text=message.text)
    await state.set_state(StudentEditWord.waiting_for_new_translation)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ø–µ—Ä–µ–≤–æ–¥:")

@router.message(StudentEditWord.waiting_for_new_translation)
async def student_edit_translation(message: types.Message, state: FSMContext):
    data = await state.get_data()
    with get_connection() as conn:
        conn.execute("UPDATE Word SET Text = ?, translation = ? WHERE Word_ID = ?", (data['new_text'], message.text, data['word_id']))
    await message.answer(f"–°–ª–æ–≤–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ: {data['new_text']} ‚Äì {message.text}")
    await state.clear()

# ---------- Word & Dictionary Management ----------
@router.callback_query(F.data == "view_student_words")
async def student_words_entry(callback: types.CallbackQuery):
    await callback.message.answer("–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å?", reply_markup=student_word_view_menu())

@router.callback_query(F.data == "student_words_all")
async def view_all_words(callback: types.CallbackQuery):
    session_id = get_or_create_session(callback.from_user.id)
    words = get_words(session_id)
    if not words:
        await callback.message.answer("–°–ª–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        return

    lines = [f"{w['Word_ID']}. {w['Text']} ‚Äì {w['translation']}" for w in words]
    await callback.message.answer("üìö –í—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ª–æ–≤–∞:\n" + "\n".join(lines))

@router.callback_query(F.data == "view_modules")
async def student_view_modules(callback: types.CallbackQuery):
    modules = get_all_modules()
    if not modules:
        await callback.message.answer("–ú–æ–¥—É–ª–∏ –ø–æ–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        return
    await callback.message.answer("\n".join(modules))

@router.callback_query(F.data == "personal_dict_menu")
async def open_personal_dict_menu(callback: types.CallbackQuery):
    await callback.message.answer("–õ–∏—á–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å: –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ", reply_markup=personal_dict_menu())

@router.callback_query(F.data == "personal_add")
async def personal_add_word_start(callback: types.CallbackQuery, state: FSMContext):
    await state.set_state(PersonalDictFSM.adding_word)
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –∞–Ω–≥–ª–∏–π—Å–∫–æ–µ —Å–ª–æ–≤–æ:")

@router.message(PersonalDictFSM.adding_word)
async def personal_add_word_text(message: types.Message, state: FSMContext):
    await state.update_data(word=message.text.strip())
    await state.set_state(PersonalDictFSM.adding_translation)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–µ–≤–æ–¥:")

@router.message(PersonalDictFSM.adding_translation)
async def personal_add_word_translation(message: types.Message, state: FSMContext):
    await state.update_data(translation=message.text.strip())
    await state.set_state(PersonalDictFSM.adding_synonyms)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å–∏–Ω–æ–Ω–∏–º—ã —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (–∏–ª–∏ '-' –µ—Å–ª–∏ –Ω–µ—Ç —Å–∏–Ω–æ–Ω–∏–º–æ–≤):")


@router.callback_query(F.data == "personal_view")
async def personal_view(callback: types.CallbackQuery):
    session_id = get_or_create_session(callback.from_user.id)
    with get_connection() as conn:
        rows = conn.execute("SELECT Word_ID, Text, translation FROM Word WHERE added_by = 'student' AND StudentSession_ID = ?", (session_id,)).fetchall()
    if not rows:
        await callback.message.answer("üïµÔ∏è –í–∞—à —Å–ª–æ–≤–∞—Ä—å –ø—É—Å—Ç.")
        return
    lines = [f"{row[0]}. {row[1]} ‚Äì {row[2]}" for row in rows]
    await callback.message.answer("üìì –í–∞—à–∏ —Å–ª–æ–≤–∞:\n" + "\n".join(lines))

@router.callback_query(F.data == "personal_delete")
async def personal_delete_start(callback: types.CallbackQuery, state: FSMContext):
    await state.set_state(PersonalDictFSM.deleting_word_id)
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ ID —Å–ª–æ–≤–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:")

@router.message(PersonalDictFSM.deleting_word_id)
async def personal_delete_confirm(message: types.Message, state: FSMContext):
    session_id = get_or_create_session(message.from_user.id)
    try:
        word_id = int(message.text.strip())
    except ValueError:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID.")
        return
    with get_connection() as conn:
        cur = conn.cursor()
        cur.execute("DELETE FROM Word WHERE Word_ID = ? AND added_by = 'student' AND StudentSession_ID = ?", (word_id, session_id))
        deleted = cur.rowcount
    await message.answer("‚úÖ –°–ª–æ–≤–æ —É–¥–∞–ª–µ–Ω–æ." if deleted else "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æ.")
    await state.clear()


@router.message(PersonalDictFSM.adding_synonyms)
async def personal_add_word_synonyms(message: types.Message, state: FSMContext):
    data = await state.get_data()
    session_id = get_or_create_session(message.from_user.id)
    synonyms = None if message.text.strip() == "-" else message.text.strip()

    try:
        add_word(
            session_id,
            data["word"],
            data["translation"],
            level="A1",
            added_by="student",
            synonyms=synonyms
        )
        await message.answer(f"‚úÖ –°–ª–æ–≤–æ <b>{data['word']}</b> –¥–æ–±–∞–≤–ª–µ–Ω–æ.", parse_mode="HTML")
    except ValueError as e:
        await message.answer(f"‚ùå {str(e)}")

    await state.clear()



@router.message(Command("achievements"))
async def show_achievements(message: types.Message):
    session_id = get_or_create_session(message.from_user.id)
    achievements = get_achievements_for_student(session_id)

    if not achievements:
        await message.answer("üòî –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π.")
        return

    text = "üèÜ <b>–í–∞—à–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è:</b>\n\n"
    for name, desc, ts in achievements:
        text += f"‚Ä¢ <b>{name}</b>\n  {desc}\n  üìÖ {ts}\n\n"

    await message.answer(text.strip(), parse_mode="HTML")


# ---------- Register ----------
def register(dp):
    dp.include_router(router)