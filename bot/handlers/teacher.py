from aiogram import Router, types, F
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

from bot.database.db_helpers import get_or_create_session, add_word, get_words, add_library_word
from bot.menus import teacher_main_menu, confirm_batch_upload_menu
from bot.database.db_helpers import get_user_role 
import sqlite3
import asyncio

router = Router()

# --- FSM States ---
class TeacherAddWord(StatesGroup):
    waiting_for_text = State()
    waiting_for_translation = State()
    waiting_for_part_of_speech = State()
    waiting_for_level = State()
    waiting_for_module = State()

class TeacherEditWord(StatesGroup):
    waiting_for_word_id = State()
    waiting_for_new_text = State()
    waiting_for_new_translation = State()

class TeacherEditSynonyms(StatesGroup):
    waiting_for_word_id = State()
    waiting_for_new_synonyms = State()

class TeacherBatchAdd(StatesGroup):
    waiting_for_batch_input = State()
    waiting_for_confirm = State()

# --- Commands ---

@router.message(Command("menu_teacher"))
async def show_teacher_menu(message: types.Message):
    role = get_user_role(message.from_user.id)
    if role != "teacher":
        await message.answer("‚õîÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –º–µ–Ω—é –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è.")
        return
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=teacher_main_menu())


async def delete_message_later(bot, chat_id, message_id, delay=180):
    await asyncio.sleep(delay)
    try:
        await bot.delete_message(chat_id, message_id)
    except Exception:
        pass  # Ignore if already deleted or insufficient permissions


@router.message(Command("help"))
async def teacher_help(message: types.Message):
    help_text = (
        "üë®‚Äçüè´ <b>–°–ø—Ä–∞–≤–∫–∞ –¥–ª—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è:</b>\n\n"
        "<b>–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n"
        "/menu_teacher - –ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è\n"
        "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n\n"
        "<b>–§—É–Ω–∫—Ü–∏–∏ –º–µ–Ω—é:</b>\n"
        "‚Ä¢ <b>–î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ</b> - –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ —Å–ª–æ–≤–æ –≤ –±–∞–∑—É\n"
        "‚Ä¢ <b>–î–æ–±–∞–≤–∏—Ç—å –ø–∞–∫–µ—Ç —Å–ª–æ–≤</b> - –î–æ–±–∞–≤–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–ª–æ–≤ –∑–∞ —Ä–∞–∑\n"
        "‚Ä¢ <b>–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ —Å–ª–æ–≤–∞</b> - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ —Å–ª–æ–≤–∞ –≤ –±–∞–∑–µ\n"
        "‚Ä¢ <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–ª–æ–≤–æ</b> - –ò–∑–º–µ–Ω–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–ª–æ–≤–æ\n"
        "‚Ä¢ <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–∏–Ω–æ–Ω–∏–º—ã</b> - –ò–∑–º–µ–Ω–∏—Ç—å —Å–∏–Ω–æ–Ω–∏–º—ã —Å–ª–æ–≤–∞\n"
        "‚Ä¢ <b>–ú–æ–∏ –º–æ–¥—É–ª–∏</b> - –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —É—á–µ–±–Ω—ã–µ –º–æ–¥—É–ª–∏"
    )
    await message.answer(help_text, parse_mode="HTML")

# --- Add single word ---
@router.callback_query(F.data == "add_word")
async def teacher_start_add(callback: types.CallbackQuery, state: FSMContext):
    if get_user_role(callback.from_user.id) != "teacher":
        await callback.message.answer("‚õîÔ∏è –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω. –¢–æ–ª—å–∫–æ –¥–ª—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π.")
        await callback.answer()
        return
    await state.set_state(TeacherAddWord.waiting_for_text)
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –∞–Ω–≥–ª–∏–π—Å–∫–æ–µ —Å–ª–æ–≤–æ:")


@router.message(TeacherAddWord.waiting_for_text)
async def teacher_get_text(message: types.Message, state: FSMContext):
    await state.update_data(text=message.text)
    await state.set_state(TeacherAddWord.waiting_for_translation)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–µ–≤–æ–¥:")

@router.message(TeacherAddWord.waiting_for_translation)
async def teacher_get_translation(message: types.Message, state: FSMContext):
    await state.update_data(translation=message.text)
    await state.set_state(TeacherAddWord.waiting_for_part_of_speech)
    await message.answer("–£–∫–∞–∂–∏—Ç–µ —á–∞—Å—Ç—å —Ä–µ—á–∏:", reply_markup=InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=label, callback_data=f"pos_{label}")]
        for label in ["noun", "verb", "adjective", "adverb", "phrase", "phrasal verb"]
    ]))

@router.callback_query(F.data.startswith("pos_"))
async def teacher_receive_pos(callback: types.CallbackQuery, state: FSMContext):
    await state.update_data(part_of_speech=callback.data.split("_", 1)[1])
    await state.set_state(TeacherAddWord.waiting_for_level)
    await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å:", reply_markup=InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=lvl, callback_data=f"level_{lvl}")]
        for lvl in ["A1", "A2", "B1"]
    ]))

@router.callback_query(F.data.startswith("level_"))
async def teacher_get_module(callback: types.CallbackQuery, state: FSMContext):
    await state.update_data(level=callback.data.split("_", 1)[1])
    await state.set_state(TeacherAddWord.waiting_for_module)
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –º–æ–¥—É–ª—è:")

@router.message(TeacherAddWord.waiting_for_module)
async def teacher_save_word(message: types.Message, state: FSMContext):
    if not message.text.strip().isdigit():
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—É –º–æ–¥—É–ª—è.")
        return

    await state.update_data(module=message.text.strip())
    data = await state.get_data()
    session_id = get_or_create_session(message.from_user.id)

    try:
        add_word(
            session_id,
            data['text'],
            data['translation'],
            data['level'],
            data['part_of_speech'],
            "teacher",
            None,
            data['module']
        )
    except ValueError as e:
        await message.answer(f"‚ùå {str(e)}")
        await state.clear()
        return

    with sqlite3.connect("dori_bot.db") as db:
        word_id = db.execute("SELECT last_insert_rowid()").fetchone()[0]
    add_library_word(session_id, word_id, can_edit=True)

    await message.answer(f"–°–ª–æ–≤–æ '{data['text']}' –¥–æ–±–∞–≤–ª–µ–Ω–æ.")
    await state.clear()

    with sqlite3.connect("dori_bot.db") as db:
        word_id = db.execute("SELECT last_insert_rowid()").fetchone()[0]
    add_library_word(session_id, word_id, can_edit=True)
    await message.answer(f"–°–ª–æ–≤–æ '{data['text']}' –¥–æ–±–∞–≤–ª–µ–Ω–æ.")
    await state.clear()

# --- Edit synonyms ---
@router.callback_query(F.data == "edit_synonyms")
async def teacher_prompt_edit_synonyms(callback: types.CallbackQuery, state: FSMContext):
    if get_user_role(callback.from_user.id) != "teacher":
        await callback.message.answer("‚õîÔ∏è –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω. –¢–æ–ª—å–∫–æ –¥–ª—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π.")
        await callback.answer()
        return
    await state.set_state(TeacherEditSynonyms.waiting_for_word_id)
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ ID —Å–ª–æ–≤–∞:")

@router.message(TeacherEditSynonyms.waiting_for_word_id)
async def teacher_receive_word_id_synonyms(message: types.Message, state: FSMContext):
    try:
        await state.update_data(word_id=int(message.text.strip()))
        await state.set_state(TeacherEditSynonyms.waiting_for_new_synonyms)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å–∏–Ω–æ–Ω–∏–º—ã —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é –∏–ª–∏ '-' –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:")
    except ValueError:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–π ID.")

# --- Batch add ---
@router.callback_query(F.data == "add_batch")
async def teacher_start_batch_add(callback: types.CallbackQuery, state: FSMContext):
    if get_user_role(callback.from_user.id) != "teacher":
        await callback.message.answer("‚õîÔ∏è –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω. –¢–æ–ª—å–∫–æ –¥–ª—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π.")
        await callback.answer()
        return
    await state.set_state(TeacherBatchAdd.waiting_for_batch_input)
    await callback.message.answer(
        "–§–æ—Ä–º–∞—Ç: —Å–ª–æ–≤–æ - –ø–µ—Ä–µ–≤–æ–¥ - —Å–∏–Ω–æ–Ω–∏–º—ã - –º–æ–¥—É–ª—å\n–ü—Ä–∏–º–µ—Ä:\ncat - –∫–æ—Ç - feline, kitty - 4"
    )


@router.message(TeacherBatchAdd.waiting_for_batch_input)
async def teacher_receive_batch_input(message: types.Message, state: FSMContext):
    await state.update_data(batch_text=message.text.strip())
    await state.set_state(TeacherBatchAdd.waiting_for_confirm)
    await message.answer("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∑–∞–≥—Ä—É–∑–∫—É:", reply_markup=confirm_batch_upload_menu())

@router.callback_query(F.data == "confirm_batch")
async def teacher_confirm_batch(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    session_id = get_or_create_session(callback.from_user.id)
    success, failed = 0, []
    for line in data['batch_text'].splitlines():
        parts = [p.strip() for p in line.split("-")]
        if len(parts) < 4 or not parts[3].isdigit():
            failed.append(line)
            continue
        text, translation, synonyms, module = parts[:4]
        part_of_speech = parts[4] if len(parts) >= 5 else None
        try:
            add_word(session_id, text, translation, "A1", part_of_speech, "teacher", synonyms, module)
            success += 1
        except Exception:
            failed.append(line)
    summary = f"–î–æ–±–∞–≤–ª–µ–Ω–æ: {success}"
    if failed:
        summary += "\n–û—à–∏–±–∫–∏:\n" + "\n".join(failed)
    await callback.message.answer(summary)
    await state.clear()


@router.callback_query(F.data == "cancel_batch")
async def teacher_cancel_batch(callback: types.CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.answer("–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")

# --- View & Edit ---
@router.callback_query(F.data == "view_words")
async def teacher_view_words(callback: types.CallbackQuery):
    if get_user_role(callback.from_user.id) != "teacher":
        await callback.message.answer("‚õîÔ∏è –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω. –¢–æ–ª—å–∫–æ –¥–ª—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π.")
        await callback.answer()
        return
    with sqlite3.connect("dori_bot.db") as db:
        rows = db.execute("SELECT Word_ID, Text, translation FROM Word WHERE added_by = 'teacher'").fetchall()
    if not rows:
        await callback.message.answer("–ë–∞–∑–∞ –ø—É—Å—Ç–∞.")
    else:
        await callback.message.answer("\n".join(f"{r[0]}. {r[1]} ‚Äì {r[2]}" for r in rows))

@router.callback_query(F.data == "start_edit")
async def teacher_prompt_edit(callback: types.CallbackQuery, state: FSMContext):
    if get_user_role(callback.from_user.id) != "teacher":
        await callback.message.answer("‚õîÔ∏è –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω. –¢–æ–ª—å–∫–æ –¥–ª—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π.")
        await callback.answer()
        return
    await state.set_state(TeacherEditWord.waiting_for_word_id)
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ ID –∏–ª–∏ —Å–ª–æ–≤–æ:")


@router.message(TeacherEditWord.waiting_for_word_id)
async def teacher_start_edit(message: types.Message, state: FSMContext):
    session_id = get_or_create_session(message.from_user.id)
    input_text = message.text.strip()
    word_id = None
    try:
        word_id = int(input_text)
    except ValueError:
        matches = [w for w in get_words(session_id) if w['Text'].lower() == input_text.lower()]
        if matches:
            word_id = matches[0]['Word_ID']
    if not word_id or not any(w['Word_ID'] == word_id for w in get_words(session_id)):
        await message.answer("–°–ª–æ–≤–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        return
    await state.update_data(word_id=word_id)
    await state.set_state(TeacherEditWord.waiting_for_new_text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∞–Ω–≥–ª–∏–π—Å–∫–æ–µ —Å–ª–æ–≤–æ:")

@router.message(TeacherEditWord.waiting_for_new_text)
async def teacher_edit_text(message: types.Message, state: FSMContext):
    await state.update_data(new_text=message.text)
    await state.set_state(TeacherEditWord.waiting_for_new_translation)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ø–µ—Ä–µ–≤–æ–¥:")

@router.message(TeacherEditWord.waiting_for_new_translation)
async def teacher_edit_translation(message: types.Message, state: FSMContext):
    data = await state.get_data()
    with sqlite3.connect("dori_bot.db") as db:
        db.execute("UPDATE Word SET Text = ?, translation = ? WHERE Word_ID = ?", (data['new_text'], message.text, data['word_id']))
    await message.answer("–°–ª–æ–≤–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ.")
    await state.clear()

def register(dp):
    dp.include_router(router)