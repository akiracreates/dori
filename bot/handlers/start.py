import os
import random
from dotenv import load_dotenv
from aiogram import Router, types, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from bot.sharedState import user_flashcards

from bot.menus import student_main_menu, teacher_main_menu, start_choice_menu
from bot.database.db_helpers import (
    get_or_create_session, get_user_role, set_user_session,
    get_all_modules, get_words, update_progress
)
from bot.handlers.teacher import delete_message_later, teacher_help
from bot.services.card_generator import generate_flashcard_image

load_dotenv()
TEACHER_PASS = os.getenv("TEACHER_PASS")

router = Router()
user_flashcards = {}

# --- FSM States ---
class RoleSelection(StatesGroup):
    waiting_for_teacher_password = State()
    waiting_for_student_level = State()

class FlashcardState(StatesGroup):
    selecting_module = State()
    awaiting_input = State()

# --- Role selection ---
@router.message(Command("start"))
async def cmd_start(message: types.Message):
    get_or_create_session(message.from_user.id)
    role = get_user_role(message.from_user.id)
    if role not in ("teacher", "student"):
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å:", reply_markup=start_choice_menu())
    elif role == "teacher":
        await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å!", reply_markup=teacher_main_menu())
    else:
        await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, —Å—Ç—É–¥–µ–Ω—Ç!", reply_markup=student_main_menu())

@router.message(Command("role"))
async def cmd_role(message: types.Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å:", reply_markup=start_choice_menu())

@router.callback_query(F.data == "choose_teacher")
async def choose_teacher(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è:")
    await state.set_state(RoleSelection.waiting_for_teacher_password)

@router.message(RoleSelection.waiting_for_teacher_password)
async def process_teacher_password(message: types.Message, state: FSMContext):
    if message.text == TEACHER_PASS:
        set_user_session(message.from_user.id, role="teacher")
        await message.answer("–ü–∞—Ä–æ–ª—å –≤–µ—Ä–µ–Ω! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å!", reply_markup=teacher_main_menu())
    else:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é —Ä–æ–ª—å.")
    await state.clear()

@router.callback_query(F.data == "choose_student")
async def choose_student(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à —É—Ä–æ–≤–µ–Ω—å –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ:")
    await callback.message.answer(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="A1", callback_data="level_A1")],
            [InlineKeyboardButton(text="A2", callback_data="level_A2")],
            [InlineKeyboardButton(text="B1", callback_data="level_B1")]
        ])
    )
    await state.set_state(RoleSelection.waiting_for_student_level)

@router.callback_query(RoleSelection.waiting_for_student_level, F.data.startswith("level_"))
async def student_level_selected(callback: types.CallbackQuery, state: FSMContext):
    level = callback.data.split("_")[1]
    set_user_session(callback.from_user.id, role="student", level=level)
    await callback.message.edit_text(f"–í–∞—à —É—Ä–æ–≤–µ–Ω—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∫–∞–∫ {level}.")
    await callback.message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, —Å—Ç—É–¥–µ–Ω—Ç!", reply_markup=student_main_menu())
    await state.clear()

# --- Flashcard Mode ---
@router.callback_query(F.data == "flashcards_start")
async def start_flashcard(callback: types.CallbackQuery, state: FSMContext):
    await state.set_state(FlashcardState.selecting_module)
    await callback.message.answer(
        "–†–µ–∂–∏–º —Ñ–ª–µ—à-–∫–∞—Ä—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω.\n\n–í–≤–µ–¥–∏—Ç–µ –º–æ–¥—É–ª—å (–Ω–∞–ø—Ä–∏–º–µ—Ä: module 4) –∏–ª–∏ '–≤—Å–µ' –¥–ª—è –≤—Å–µ—Ö —Å–ª–æ–≤:"
    )

@router.message(FlashcardState.selecting_module)
async def load_flashcard_words(message: types.Message, state: FSMContext):
    module = message.text.strip().lower()
    session_id = get_or_create_session(message.from_user.id)
    words = get_words(session_id, module if module != "–≤—Å–µ" else None)

    if not words:
        await message.answer("–°–ª–æ–≤ –∏–∑ —ç—Ç–æ–≥–æ –º–æ–¥—É–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        return

    random.shuffle(words)
    user_flashcards[message.from_user.id] = words[1:]
    current_word = words[0]
    await state.set_state(FlashcardState.awaiting_input)
    await state.update_data(current_word=current_word)

    image = await generate_flashcard_image(current_word["translation"], is_question=True)
    sent = await message.answer_photo(photo=image)
    await message.answer(f"–°–ª–æ–≤–æ: {current_word['translation']}")
    await delete_message_later(message.bot, message.chat.id, sent.message_id)

@router.message(FlashcardState.awaiting_input)
async def handle_flashcard_answer(message: types.Message, state: FSMContext):
    session_id = get_or_create_session(message.from_user.id)
    data = await state.get_data()
    word = data["current_word"]

    user_input = message.text.strip().lower()
    correct = word["Text"].strip().lower()
    synonyms = [s.strip().lower() for s in (word.get("synonyms") or "").split(",")]
    is_correct = user_input == correct or user_input in synonyms

    update_progress(session_id, word["Word_ID"], is_correct)

    feedback = (
        "‚úÖ –í–µ—Ä–Ω–æ!" if user_input == correct else
        "‚úÖ –í–µ—Ä–Ω–æ (—Å–∏–Ω–æ–Ω–∏–º)!" if user_input in synonyms else
        f"‚ùå –ù–µ–≤–µ—Ä–Ω–æ.\n–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: <b>{word['Text']}</b>"
    )

    await message.answer(f"{feedback}\n–°–∏–Ω–æ–Ω–∏–º—ã: {word.get('synonyms', '–Ω–µ —É–∫–∞–∑–∞–Ω—ã')}", parse_mode="HTML")

    next_words = user_flashcards.get(message.from_user.id, [])
    if not next_words:
        await message.answer("üéâ –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
        await state.clear()
        return

    if not is_correct:
        next_words.append(word)
    next_word = next_words.pop(0)
    user_flashcards[message.from_user.id] = next_words
    await state.update_data(current_word=next_word)

    image = await generate_flashcard_image(next_word["translation"], is_question=True)
    sent = await message.answer_photo(photo=image)
    await message.answer(f"–°–ª–æ–≤–æ: {next_word['translation']}")
    await delete_message_later(message.bot, message.chat.id, sent.message_id)



# --- Help ---
@router.message(Command("help"))
async def cmd_help(message: types.Message):
    role = get_user_role(message.from_user.id)
    help_text = (
        "üìö <b>–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥:</b>\n\n"
        "üõ† <b>–û–±—â–∏–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n"
        "/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
        "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n"
        "/role - –í—ã–±—Ä–∞—Ç—å –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç—å —Ä–æ–ª—å\n"
        "/cancel - –û—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ\n\n"
    )
    if role == "teacher":
        help_text += (
            "üë®‚Äçüè´ <b>–ö–æ–º–∞–Ω–¥—ã –¥–ª—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è:</b>\n"
            "/menu_teacher - –ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è\n"
            "‚Ä¢ –î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ\n"
            "‚Ä¢ –î–æ–±–∞–≤–∏—Ç—å –ø–∞–∫–µ—Ç —Å–ª–æ–≤\n"
            "‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ —Å–ª–æ–≤–∞\n"
            "‚Ä¢ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–ª–æ–≤–æ\n"
            "‚Ä¢ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–∏–Ω–æ–Ω–∏–º—ã\n"
            "‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–æ–¥—É–ª–∏\n"
        )
    elif role == "student":
        help_text += (
            "üéì <b>–ö–æ–º–∞–Ω–¥—ã –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–∞:</b>\n"
            "/levelSwitch - –ò–∑–º–µ–Ω–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ (A1/A2/B1)\n"
            "/menu_student - –ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é —Å—Ç—É–¥–µ–Ω—Ç–∞\n"
            "‚Ä¢ –§–ª–µ—à-–∫–∞—Ä—Ç—ã\n"
            "‚Ä¢ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–ª–æ–≤–æ\n"
            "‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–æ–¥—É–ª–∏\n"
            "‚Ä¢ /stopcard - –ó–∞–≤–µ—Ä—à–∏—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É\n"
        )
    else:
        help_text += "ü§î –í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å —Å –ø–æ–º–æ—â—å—é /start."

    await message.answer(help_text, parse_mode="HTML")

@router.callback_query(F.data == "help_command")
async def handle_help_callback(callback: types.CallbackQuery):
    await teacher_help(callback.message)
    await callback.answer()

def register(dp):
    dp.include_router(router)
